# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from au_open_banking_spec.models.banking_product_rate_condition import BankingProductRateCondition
from typing import Optional, Set
from typing_extensions import Self

class BankingProductRateTierV3(BaseModel):
    """
    Defines the criteria and conditions for which a rate applies
    """ # noqa: E501
    name: StrictStr = Field(description="A display name for the tier")
    unit_of_measure: StrictStr = Field(description="The unit of measure that applies to the minimumValue and maximumValue values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)", alias="unitOfMeasure")
    minimum_value: Union[StrictFloat, StrictInt] = Field(description="The number of unitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value", alias="minimumValue")
    maximum_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of unitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as minimumValue. Where this is the same as the minimumValue value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier's range has no upper bound.", alias="maximumValue")
    rate_application_method: Optional[StrictStr] = Field(default=None, description="The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')", alias="rateApplicationMethod")
    applicability_conditions: Optional[BankingProductRateCondition] = Field(default=None, alias="applicabilityConditions")
    additional_info: Optional[StrictStr] = Field(default=None, description="Display text providing more information on the rate tier.", alias="additionalInfo")
    additional_info_uri: Optional[StrictStr] = Field(default=None, description="Link to a web page with more information on this rate tier", alias="additionalInfoUri")
    __properties: ClassVar[List[str]] = ["name", "unitOfMeasure", "minimumValue", "maximumValue", "rateApplicationMethod", "applicabilityConditions", "additionalInfo", "additionalInfoUri"]

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DAY', 'DOLLAR', 'MONTH', 'PERCENT']):
            raise ValueError("must be one of enum values ('DAY', 'DOLLAR', 'MONTH', 'PERCENT')")
        return value

    @field_validator('rate_application_method')
    def rate_application_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PER_TIER', 'WHOLE_BALANCE']):
            raise ValueError("must be one of enum values ('PER_TIER', 'WHOLE_BALANCE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingProductRateTierV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applicability_conditions
        if self.applicability_conditions:
            _dict['applicabilityConditions'] = self.applicability_conditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingProductRateTierV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "minimumValue": obj.get("minimumValue"),
            "maximumValue": obj.get("maximumValue"),
            "rateApplicationMethod": obj.get("rateApplicationMethod"),
            "applicabilityConditions": BankingProductRateCondition.from_dict(obj["applicabilityConditions"]) if obj.get("applicabilityConditions") is not None else None,
            "additionalInfo": obj.get("additionalInfo"),
            "additionalInfoUri": obj.get("additionalInfoUri")
        })
        return _obj


