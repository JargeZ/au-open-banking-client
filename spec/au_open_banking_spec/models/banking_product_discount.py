# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_product_discount_eligibility import BankingProductDiscountEligibility
from typing import Optional, Set
from typing_extensions import Self

class BankingProductDiscount(BaseModel):
    """
    BankingProductDiscount
    """ # noqa: E501
    description: StrictStr = Field(description="Description of the discount")
    discount_type: StrictStr = Field(description="The type of discount. See the next section for an overview of valid values and their meaning", alias="discountType")
    amount: Optional[StrictStr] = Field(default=None, description="Dollar value of the discount. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory.")
    balance_rate: Optional[StrictStr] = Field(default=None, description="A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee", alias="balanceRate")
    transaction_rate: Optional[StrictStr] = Field(default=None, description="A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory", alias="transactionRate")
    accrued_rate: Optional[StrictStr] = Field(default=None, description="A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee", alias="accruedRate")
    fee_rate: Optional[StrictStr] = Field(default=None, description="A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee", alias="feeRate")
    additional_value: Optional[StrictStr] = Field(default=None, description="Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)", alias="additionalValue")
    additional_info: Optional[StrictStr] = Field(default=None, description="Display text providing more information on the discount", alias="additionalInfo")
    additional_info_uri: Optional[StrictStr] = Field(default=None, description="Link to a web page with more information on this discount", alias="additionalInfoUri")
    eligibility: Optional[List[BankingProductDiscountEligibility]] = Field(default=None, description="Eligibility constraints that apply to this discount. Mandatory if ``discountType`` is ``ELIGIBILITY_ONLY``.")
    __properties: ClassVar[List[str]] = ["description", "discountType", "amount", "balanceRate", "transactionRate", "accruedRate", "feeRate", "additionalValue", "additionalInfo", "additionalInfoUri", "eligibility"]

    @field_validator('discount_type')
    def discount_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BALANCE', 'DEPOSITS', 'ELIGIBILITY_ONLY', 'FEE_CAP', 'PAYMENTS']):
            raise ValueError("must be one of enum values ('BALANCE', 'DEPOSITS', 'ELIGIBILITY_ONLY', 'FEE_CAP', 'PAYMENTS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingProductDiscount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in eligibility (list)
        _items = []
        if self.eligibility:
            for _item in self.eligibility:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eligibility'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingProductDiscount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "discountType": obj.get("discountType"),
            "amount": obj.get("amount"),
            "balanceRate": obj.get("balanceRate"),
            "transactionRate": obj.get("transactionRate"),
            "accruedRate": obj.get("accruedRate"),
            "feeRate": obj.get("feeRate"),
            "additionalValue": obj.get("additionalValue"),
            "additionalInfo": obj.get("additionalInfo"),
            "additionalInfoUri": obj.get("additionalInfoUri"),
            "eligibility": [BankingProductDiscountEligibility.from_dict(_item) for _item in obj["eligibility"]] if obj.get("eligibility") is not None else None
        })
        return _obj


