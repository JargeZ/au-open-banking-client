# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_scheduled_payment_interval import BankingScheduledPaymentInterval
from typing import Optional, Set
from typing_extensions import Self

class BankingScheduledPaymentRecurrenceIntervalSchedule(BaseModel):
    """
    Indicates that the schedule of payments is defined by a series of intervals. Mandatory if recurrenceUType is set to intervalSchedule
    """ # noqa: E501
    final_payment_date: Optional[StrictStr] = Field(default=None, description="The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely", alias="finalPaymentDate")
    payments_remaining: Optional[StrictInt] = Field(default=None, description="Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely", alias="paymentsRemaining")
    non_business_day_treatment: Optional[StrictStr] = Field(default='ON', description="Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored", alias="nonBusinessDayTreatment")
    intervals: List[BankingScheduledPaymentInterval] = Field(description="An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry")
    __properties: ClassVar[List[str]] = ["finalPaymentDate", "paymentsRemaining", "nonBusinessDayTreatment", "intervals"]

    @field_validator('non_business_day_treatment')
    def non_business_day_treatment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AFTER', 'BEFORE', 'ON', 'ONLY']):
            raise ValueError("must be one of enum values ('AFTER', 'BEFORE', 'ON', 'ONLY')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentRecurrenceIntervalSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intervals (list)
        _items = []
        if self.intervals:
            for _item in self.intervals:
                if _item:
                    _items.append(_item.to_dict())
            _dict['intervals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentRecurrenceIntervalSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "finalPaymentDate": obj.get("finalPaymentDate"),
            "paymentsRemaining": obj.get("paymentsRemaining"),
            "nonBusinessDayTreatment": obj.get("nonBusinessDayTreatment") if obj.get("nonBusinessDayTreatment") is not None else 'ON',
            "intervals": [BankingScheduledPaymentInterval.from_dict(_item) for _item in obj["intervals"]] if obj.get("intervals") is not None else None
        })
        return _obj


