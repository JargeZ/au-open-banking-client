# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_transaction_detail_all_of_extended_data_x2p101_payload import BankingTransactionDetailAllOfExtendedDataX2p101Payload
from typing import Optional, Set
from typing_extensions import Self

class BankingTransactionDetailAllOfExtendedData(BaseModel):
    """
    BankingTransactionDetailAllOfExtendedData
    """ # noqa: E501
    payer: Optional[StrictStr] = Field(default=None, description="Label of the originating payer. Mandatory for inbound payment")
    payee: Optional[StrictStr] = Field(default=None, description="Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)")
    extension_u_type: Optional[StrictStr] = Field(default=None, description="Optional extended data specific to transactions originated via NPP", alias="extensionUType")
    x2p101_payload: Optional[BankingTransactionDetailAllOfExtendedDataX2p101Payload] = Field(default=None, alias="x2p101Payload")
    service: StrictStr = Field(description="Identifier of the applicable overlay service. Valid values are: X2P1.01")
    __properties: ClassVar[List[str]] = ["payer", "payee", "extensionUType", "x2p101Payload", "service"]

    @field_validator('extension_u_type')
    def extension_u_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['x2p101Payload']):
            raise ValueError("must be one of enum values ('x2p101Payload')")
        return value

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['X2P1.01']):
            raise ValueError("must be one of enum values ('X2P1.01')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingTransactionDetailAllOfExtendedData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of x2p101_payload
        if self.x2p101_payload:
            _dict['x2p101Payload'] = self.x2p101_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingTransactionDetailAllOfExtendedData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payer": obj.get("payer"),
            "payee": obj.get("payee"),
            "extensionUType": obj.get("extensionUType"),
            "x2p101Payload": BankingTransactionDetailAllOfExtendedDataX2p101Payload.from_dict(obj["x2p101Payload"]) if obj.get("x2p101Payload") is not None else None,
            "service": obj.get("service")
        })
        return _obj


