# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_product_bundle import BankingProductBundle
from au_open_banking_spec.models.banking_product_constraint import BankingProductConstraint
from au_open_banking_spec.models.banking_product_deposit_rate import BankingProductDepositRate
from au_open_banking_spec.models.banking_product_eligibility import BankingProductEligibility
from au_open_banking_spec.models.banking_product_feature_v2 import BankingProductFeatureV2
from au_open_banking_spec.models.banking_product_fee import BankingProductFee
from au_open_banking_spec.models.banking_product_lending_rate_v2 import BankingProductLendingRateV2
from typing import Optional, Set
from typing_extensions import Self

class BankingProductDetailV4AllOf(BaseModel):
    """
    BankingProductDetailV4AllOf
    """ # noqa: E501
    bundles: Optional[List[BankingProductBundle]] = Field(default=None, description="An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also")
    features: Optional[List[BankingProductFeatureV2]] = Field(default=None, description="Array of features available for the product")
    constraints: Optional[List[BankingProductConstraint]] = Field(default=None, description="Constraints on the application for or operation of the product such as minimum balances or limit thresholds")
    eligibility: Optional[List[BankingProductEligibility]] = Field(default=None, description="Eligibility criteria for the product")
    fees: Optional[List[BankingProductFee]] = Field(default=None, description="Fees applicable for the product")
    deposit_rates: Optional[List[BankingProductDepositRate]] = Field(default=None, description="Interest rates available for deposits", alias="depositRates")
    lending_rates: Optional[List[BankingProductLendingRateV2]] = Field(default=None, description="Interest rates charged against lending balances", alias="lendingRates")
    __properties: ClassVar[List[str]] = ["bundles", "features", "constraints", "eligibility", "fees", "depositRates", "lendingRates"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingProductDetailV4AllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bundles (list)
        _items = []
        if self.bundles:
            for _item in self.bundles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bundles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item in self.constraints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in eligibility (list)
        _items = []
        if self.eligibility:
            for _item in self.eligibility:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eligibility'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item in self.fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deposit_rates (list)
        _items = []
        if self.deposit_rates:
            for _item in self.deposit_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['depositRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lending_rates (list)
        _items = []
        if self.lending_rates:
            for _item in self.lending_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lendingRates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingProductDetailV4AllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundles": [BankingProductBundle.from_dict(_item) for _item in obj["bundles"]] if obj.get("bundles") is not None else None,
            "features": [BankingProductFeatureV2.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "constraints": [BankingProductConstraint.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "eligibility": [BankingProductEligibility.from_dict(_item) for _item in obj["eligibility"]] if obj.get("eligibility") is not None else None,
            "fees": [BankingProductFee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "depositRates": [BankingProductDepositRate.from_dict(_item) for _item in obj["depositRates"]] if obj.get("depositRates") is not None else None,
            "lendingRates": [BankingProductLendingRateV2.from_dict(_item) for _item in obj["lendingRates"]] if obj.get("lendingRates") is not None else None
        })
        return _obj


