# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_scheduled_payment_from import BankingScheduledPaymentFrom
from au_open_banking_spec.models.banking_scheduled_payment_recurrence import BankingScheduledPaymentRecurrence
from au_open_banking_spec.models.banking_scheduled_payment_set_v2 import BankingScheduledPaymentSetV2
from typing import Optional, Set
from typing_extensions import Self

class BankingScheduledPaymentV2(BaseModel):
    """
    BankingScheduledPaymentV2
    """ # noqa: E501
    scheduled_payment_id: StrictStr = Field(description="A unique ID of the scheduled payment adhering to the standards for ID permanence", alias="scheduledPaymentId")
    nickname: Optional[StrictStr] = Field(default=None, description="The short display name of the scheduled payment as provided by the customer if provided. Where a customer has not provided a nickname, a display name derived by the bank for the scheduled payment should be provided that is consistent with existing digital banking channels")
    payer_reference: StrictStr = Field(description="The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payerâ€™s account. Empty string if no data provided", alias="payerReference")
    payee_reference: Optional[StrictStr] = Field(default=None, description="The reference for the transaction, if applicable, that will be provided by the originating institution for all payments in the payment set. Empty string if no data provided", alias="payeeReference")
    status: StrictStr = Field(description="Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.")
    var_from: BankingScheduledPaymentFrom = Field(alias="from")
    payment_set: List[BankingScheduledPaymentSetV2] = Field(alias="paymentSet")
    recurrence: BankingScheduledPaymentRecurrence
    __properties: ClassVar[List[str]] = ["scheduledPaymentId", "nickname", "payerReference", "payeeReference", "status", "from", "paymentSet", "recurrence"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'INACTIVE', 'SKIP']):
            raise ValueError("must be one of enum values ('ACTIVE', 'INACTIVE', 'SKIP')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payment_set (list)
        _items = []
        if self.payment_set:
            for _item in self.payment_set:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentSet'] = _items
        # override the default output from pydantic by calling `to_dict()` of recurrence
        if self.recurrence:
            _dict['recurrence'] = self.recurrence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scheduledPaymentId": obj.get("scheduledPaymentId"),
            "nickname": obj.get("nickname"),
            "payerReference": obj.get("payerReference"),
            "payeeReference": obj.get("payeeReference"),
            "status": obj.get("status"),
            "from": BankingScheduledPaymentFrom.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "paymentSet": [BankingScheduledPaymentSetV2.from_dict(_item) for _item in obj["paymentSet"]] if obj.get("paymentSet") is not None else None,
            "recurrence": BankingScheduledPaymentRecurrence.from_dict(obj["recurrence"]) if obj.get("recurrence") is not None else None
        })
        return _obj


