# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CommonSimpleAddress(BaseModel):
    """
    CommonSimpleAddress
    """ # noqa: E501
    mailing_name: Optional[StrictStr] = Field(default=None, description="Name of the individual or business formatted for inclusion in an address used for physical mail", alias="mailingName")
    address_line1: StrictStr = Field(description="First line of the standard address object", alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, description="Second line of the standard address object", alias="addressLine2")
    address_line3: Optional[StrictStr] = Field(default=None, description="Third line of the standard address object", alias="addressLine3")
    postcode: Optional[StrictStr] = Field(default=None, description="Mandatory for Australian addresses")
    city: StrictStr = Field(description="Name of the city or locality")
    state: StrictStr = Field(description="Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT")
    country: Optional[StrictStr] = Field(default='AUS', description="A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.")
    __properties: ClassVar[List[str]] = ["mailingName", "addressLine1", "addressLine2", "addressLine3", "postcode", "city", "state", "country"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonSimpleAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonSimpleAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mailingName": obj.get("mailingName"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "addressLine3": obj.get("addressLine3"),
            "postcode": obj.get("postcode"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country") if obj.get("country") is not None else 'AUS'
        })
        return _obj


