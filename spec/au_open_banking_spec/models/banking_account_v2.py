# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_product_category import BankingProductCategory
from typing import Optional, Set
from typing_extensions import Self

class BankingAccountV2(BaseModel):
    """
    BankingAccountV2
    """ # noqa: E501
    account_id: StrictStr = Field(description="A unique ID of the account adhering to the standards for ID permanence", alias="accountId")
    creation_date: Optional[StrictStr] = Field(default=None, description="Date that the account was created (if known)", alias="creationDate")
    display_name: StrictStr = Field(description="The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.", alias="displayName")
    nickname: Optional[StrictStr] = Field(default=None, description="A customer supplied nick name for the account")
    open_status: Optional[StrictStr] = Field(default='OPEN', description="Open or closed status for the account. If not present then OPEN is assumed", alias="openStatus")
    is_owned: Optional[StrictBool] = Field(default=True, description="Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed", alias="isOwned")
    account_ownership: StrictStr = Field(description="Value indicating the number of customers that have ownership of the account, according to the data holder's definition of account ownership. Does not indicate that all account owners are eligible consumers", alias="accountOwnership")
    masked_number: StrictStr = Field(description="A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number", alias="maskedNumber")
    product_category: BankingProductCategory = Field(alias="productCategory")
    product_name: StrictStr = Field(description="The unique identifier of the account as defined by the data holder (akin to model number for the account)", alias="productName")
    __properties: ClassVar[List[str]] = ["accountId", "creationDate", "displayName", "nickname", "openStatus", "isOwned", "accountOwnership", "maskedNumber", "productCategory", "productName"]

    @field_validator('open_status')
    def open_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLOSED', 'OPEN']):
            raise ValueError("must be one of enum values ('CLOSED', 'OPEN')")
        return value

    @field_validator('account_ownership')
    def account_ownership_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNKNOWN', 'ONE_PARTY', 'TWO_PARTY', 'MANY_PARTY', 'OTHER']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'ONE_PARTY', 'TWO_PARTY', 'MANY_PARTY', 'OTHER')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingAccountV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingAccountV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "creationDate": obj.get("creationDate"),
            "displayName": obj.get("displayName"),
            "nickname": obj.get("nickname"),
            "openStatus": obj.get("openStatus") if obj.get("openStatus") is not None else 'OPEN',
            "isOwned": obj.get("isOwned") if obj.get("isOwned") is not None else True,
            "accountOwnership": obj.get("accountOwnership"),
            "maskedNumber": obj.get("maskedNumber"),
            "productCategory": obj.get("productCategory"),
            "productName": obj.get("productName")
        })
        return _obj


