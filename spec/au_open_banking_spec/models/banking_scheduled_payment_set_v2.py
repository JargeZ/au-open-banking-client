# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_scheduled_payment_to_v2 import BankingScheduledPaymentToV2
from typing import Optional, Set
from typing_extensions import Self

class BankingScheduledPaymentSetV2(BaseModel):
    """
    The set of payment amounts and destination accounts for this payment accommodating multi-part payments. A single entry indicates a simple payment with one destination account. Must have at least one entry
    """ # noqa: E501
    to: BankingScheduledPaymentToV2
    is_amount_calculated: Optional[StrictBool] = Field(default=None, description="Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed", alias="isAmountCalculated")
    amount: Optional[StrictStr] = Field(default=None, description="The amount of the next payment if known. Mandatory unless the isAmountCalculated field is set to true. Must be zero or positive if present")
    currency: Optional[StrictStr] = Field(default=None, description="The currency for the payment. AUD assumed if not present")
    __properties: ClassVar[List[str]] = ["to", "isAmountCalculated", "amount", "currency"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentSetV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingScheduledPaymentSetV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "to": BankingScheduledPaymentToV2.from_dict(obj["to"]) if obj.get("to") is not None else None,
            "isAmountCalculated": obj.get("isAmountCalculated"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency")
        })
        return _obj


