# coding: utf-8

"""
    CDR Banking API

    Consumer Data Standards APIs created by the Data Standards Body (DSB), with the Data Standards Chair as the decision maker to meet the needs of the Consumer Data Right

    The version of the OpenAPI document: 1.29.0
    Contact: contact@consumerdatastandards.gov.au
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from au_open_banking_spec.models.banking_product_additional_information_v2 import BankingProductAdditionalInformationV2
from au_open_banking_spec.models.banking_product_bundle import BankingProductBundle
from au_open_banking_spec.models.banking_product_category import BankingProductCategory
from au_open_banking_spec.models.banking_product_constraint import BankingProductConstraint
from au_open_banking_spec.models.banking_product_deposit_rate import BankingProductDepositRate
from au_open_banking_spec.models.banking_product_eligibility import BankingProductEligibility
from au_open_banking_spec.models.banking_product_feature_v2 import BankingProductFeatureV2
from au_open_banking_spec.models.banking_product_fee import BankingProductFee
from au_open_banking_spec.models.banking_product_lending_rate_v2 import BankingProductLendingRateV2
from au_open_banking_spec.models.banking_product_v4_card_art import BankingProductV4CardArt
from typing import Optional, Set
from typing_extensions import Self

class BankingProductDetailV4(BaseModel):
    """
    BankingProductDetailV4
    """ # noqa: E501
    product_id: StrictStr = Field(description="A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.", alias="productId")
    effective_from: Optional[StrictStr] = Field(default=None, description="The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate", alias="effectiveFrom")
    effective_to: Optional[StrictStr] = Field(default=None, description="The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products", alias="effectiveTo")
    last_updated: StrictStr = Field(description="The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)", alias="lastUpdated")
    product_category: BankingProductCategory = Field(alias="productCategory")
    name: StrictStr = Field(description="The display name of the product")
    description: StrictStr = Field(description="A description of the product")
    brand: StrictStr = Field(description="A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required")
    brand_name: Optional[StrictStr] = Field(default=None, description="An optional display name of the brand", alias="brandName")
    application_uri: Optional[StrictStr] = Field(default=None, description="A link to an application web page where this product can be applied for.", alias="applicationUri")
    is_tailored: StrictBool = Field(description="Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable", alias="isTailored")
    additional_information: Optional[BankingProductAdditionalInformationV2] = Field(default=None, alias="additionalInformation")
    card_art: Optional[List[BankingProductV4CardArt]] = Field(default=None, description="An array of card art images", alias="cardArt")
    bundles: Optional[List[BankingProductBundle]] = Field(default=None, description="An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also")
    features: Optional[List[BankingProductFeatureV2]] = Field(default=None, description="Array of features available for the product")
    constraints: Optional[List[BankingProductConstraint]] = Field(default=None, description="Constraints on the application for or operation of the product such as minimum balances or limit thresholds")
    eligibility: Optional[List[BankingProductEligibility]] = Field(default=None, description="Eligibility criteria for the product")
    fees: Optional[List[BankingProductFee]] = Field(default=None, description="Fees applicable for the product")
    deposit_rates: Optional[List[BankingProductDepositRate]] = Field(default=None, description="Interest rates available for deposits", alias="depositRates")
    lending_rates: Optional[List[BankingProductLendingRateV2]] = Field(default=None, description="Interest rates charged against lending balances", alias="lendingRates")
    __properties: ClassVar[List[str]] = ["productId", "effectiveFrom", "effectiveTo", "lastUpdated", "productCategory", "name", "description", "brand", "brandName", "applicationUri", "isTailored", "additionalInformation", "cardArt", "bundles", "features", "constraints", "eligibility", "fees", "depositRates", "lendingRates"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankingProductDetailV4 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_information
        if self.additional_information:
            _dict['additionalInformation'] = self.additional_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in card_art (list)
        _items = []
        if self.card_art:
            for _item in self.card_art:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cardArt'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bundles (list)
        _items = []
        if self.bundles:
            for _item in self.bundles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bundles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item in self.constraints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['constraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in eligibility (list)
        _items = []
        if self.eligibility:
            for _item in self.eligibility:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eligibility'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item in self.fees:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fees'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deposit_rates (list)
        _items = []
        if self.deposit_rates:
            for _item in self.deposit_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['depositRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lending_rates (list)
        _items = []
        if self.lending_rates:
            for _item in self.lending_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lendingRates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankingProductDetailV4 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "productId": obj.get("productId"),
            "effectiveFrom": obj.get("effectiveFrom"),
            "effectiveTo": obj.get("effectiveTo"),
            "lastUpdated": obj.get("lastUpdated"),
            "productCategory": obj.get("productCategory"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "brand": obj.get("brand"),
            "brandName": obj.get("brandName"),
            "applicationUri": obj.get("applicationUri"),
            "isTailored": obj.get("isTailored"),
            "additionalInformation": BankingProductAdditionalInformationV2.from_dict(obj["additionalInformation"]) if obj.get("additionalInformation") is not None else None,
            "cardArt": [BankingProductV4CardArt.from_dict(_item) for _item in obj["cardArt"]] if obj.get("cardArt") is not None else None,
            "bundles": [BankingProductBundle.from_dict(_item) for _item in obj["bundles"]] if obj.get("bundles") is not None else None,
            "features": [BankingProductFeatureV2.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "constraints": [BankingProductConstraint.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "eligibility": [BankingProductEligibility.from_dict(_item) for _item in obj["eligibility"]] if obj.get("eligibility") is not None else None,
            "fees": [BankingProductFee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "depositRates": [BankingProductDepositRate.from_dict(_item) for _item in obj["depositRates"]] if obj.get("depositRates") is not None else None,
            "lendingRates": [BankingProductLendingRateV2.from_dict(_item) for _item in obj["lendingRates"]] if obj.get("lendingRates") is not None else None
        })
        return _obj


